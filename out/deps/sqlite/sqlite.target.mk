# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := sqlite
DEFS_Debug := \
	'-D_GLIBCXX_USE_CXX11_ABI=1' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DNODE_OPENSSL_CONF_NAME=nodejs_conf' \
	'-DICU_NO_USER_DATA_OVERRIDE' \
	'-D__STDC_FORMAT_MACROS' \
	'-DOPENSSL_NO_PINSHARED' \
	'-DOPENSSL_THREADS' \
	'-DSQLITE_DEFAULT_MEMSTATUS=0' \
	'-DSQLITE_ENABLE_COLUMN_METADATA' \
	'-DSQLITE_ENABLE_DBSTAT_VTAB' \
	'-DSQLITE_ENABLE_FTS3' \
	'-DSQLITE_ENABLE_FTS3_PARENTHESIS' \
	'-DSQLITE_ENABLE_FTS5' \
	'-DSQLITE_ENABLE_GEOPOLY' \
	'-DSQLITE_ENABLE_MATH_FUNCTIONS' \
	'-DSQLITE_ENABLE_PREUPDATE_HOOK' \
	'-DSQLITE_ENABLE_RBU' \
	'-DSQLITE_ENABLE_RTREE' \
	'-DSQLITE_ENABLE_SESSION' \
	'-DDEBUG' \
	'-D_DEBUG'

# Flags passed to all source files.
CFLAGS_Debug := \
	-pthread \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-fvisibility=hidden \
	-m64 \
	-g \
	-O0

# Flags passed to only C files.
CFLAGS_C_Debug :=

# Flags passed to only C++ files.
CFLAGS_CC_Debug := \
	-fno-rtti \
	-fno-exceptions \
	-fno-strict-aliasing \
	-std=gnu++20

INCS_Debug := \
	-I$(srcdir)/deps/sqlite

DEFS_Release := \
	'-D_GLIBCXX_USE_CXX11_ABI=1' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DNODE_OPENSSL_CONF_NAME=nodejs_conf' \
	'-DICU_NO_USER_DATA_OVERRIDE' \
	'-D__STDC_FORMAT_MACROS' \
	'-DOPENSSL_NO_PINSHARED' \
	'-DOPENSSL_THREADS' \
	'-DSQLITE_DEFAULT_MEMSTATUS=0' \
	'-DSQLITE_ENABLE_COLUMN_METADATA' \
	'-DSQLITE_ENABLE_DBSTAT_VTAB' \
	'-DSQLITE_ENABLE_FTS3' \
	'-DSQLITE_ENABLE_FTS3_PARENTHESIS' \
	'-DSQLITE_ENABLE_FTS5' \
	'-DSQLITE_ENABLE_GEOPOLY' \
	'-DSQLITE_ENABLE_MATH_FUNCTIONS' \
	'-DSQLITE_ENABLE_PREUPDATE_HOOK' \
	'-DSQLITE_ENABLE_RBU' \
	'-DSQLITE_ENABLE_RTREE' \
	'-DSQLITE_ENABLE_SESSION'

# Flags passed to all source files.
CFLAGS_Release := \
	-pthread \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-fvisibility=hidden \
	-m64 \
	-O3 \
	-fno-omit-frame-pointer

# Flags passed to only C files.
CFLAGS_C_Release :=

# Flags passed to only C++ files.
CFLAGS_CC_Release := \
	-fno-rtti \
	-fno-exceptions \
	-fno-strict-aliasing \
	-std=gnu++20

INCS_Release := \
	-I$(srcdir)/deps/sqlite

OBJS := \
	$(obj).target/$(TARGET)/deps/sqlite/sqlite3.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD
	@$(call do_cmd,cc,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD
	@$(call do_cmd,cc,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD
	@$(call do_cmd,cc,1)

# End of this set of suffix rules
### Rules for final target.
LDFLAGS_Debug := \
	-pthread \
	-rdynamic \
	-m64

LDFLAGS_Release := \
	-pthread \
	-rdynamic \
	-m64

LIBS :=

$(obj).target/deps/sqlite/libsqlite.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(obj).target/deps/sqlite/libsqlite.a: LIBS := $(LIBS)
$(obj).target/deps/sqlite/libsqlite.a: TOOLSET := $(TOOLSET)
$(obj).target/deps/sqlite/libsqlite.a: $(OBJS)
	$(call create_thin_archive,$@,$^)

# Add target alias
.PHONY: sqlite
sqlite: $(obj).target/deps/sqlite/libsqlite.a

# Add target alias to "all" target.
.PHONY: all
all: sqlite

